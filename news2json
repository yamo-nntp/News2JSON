#! /usr/bin/perl

# Change this to according the INN perl lib location
use lib '/usr/share/perl5'; use INN::Config;

=head1 NAME

 news2json - News (RFC5536 / RFC1036) to JNTP (JSON) GateWay for INN
 Copyright (c) 2001 by Marco d'Itri <md@linux.it> for controlchan's parts code
 Copyright (c) 2014, Gérald Niel
 Copyright (c) 2015, Stéphane Grégoire Julien Arlandis

=head1 SYNOPSIS

 INN gives us
 	@token@ <message-id> feeds
 for each article that needs to be sended.  We invoke sm on the
 localhost to get the actual article, convert it to json string and
 send it to JNTP server over HTTP.

 In the INN's newsfeeds file, you need to have a channel feed:

 	news2json!:!*:Ac,Af,Tc,Wnm*:<pathbin>/news2json

 and a site for each of the various jntp site you're feeding,
 such as

 	nemo.gegeweb.org/from-jntp:!*,local.*:Ap,Tm:news2json!

 According to JNTP RFC (see <http://www.nemoweb.net/?page_id=75>),
 if your hostname doesn't match with your public ip/hostname
 configured for your server by the JNTP server you're feeding you
 need to fix your 'fromname' in the optional <pathetc>/news2json.cf.
 This file map jntp fqdn feed with hostname in one line per feed needed
 to be fixed.
 For example if your hostname (fromhost in <pathetc>/innfeed.conf) is
 name.domain.local but you need to be jntp.public.tld for the feed
 nemo.gegeweb.org such as above :

 	# Feed (fqdn in newsfeeds)		Fromname
 	nemo.gegeweb.org				jntp.public.tld

 Signing Jid with ssl/RSA 1024 key:
 this program attempt to find ssl/RSA keys pair in <pathetc>/ssl.
 Create the folder if not exists:
 $ sudo -u news mkdir <pathetc>/ssl
 $ sudo chmod 700 <pathetc>/ssl
 Generate keys pair
 $ sudo -u news openssl genrsa -out <pathetc>/ssl/jntp.key 1024
 $ sudo -u news openssl rsa -in <pathetc>/ssl/jntp.key -pubout > <pathetc>/ssl/jntp.cert
 
=head1 CHANGELOG
 - Versions 0.4.* : rewrite of 0.3.0-pre01 from 0.2.12 for the new version of JNTP Protocol
 - Versions 0.3.* : abandonned 
 - Versions 0.2.* : Works with Inn and channel feed (last stable version 0.2.12)
 - Versions 0.1.* : local versions (for testing format of JNTP article)
=head1 DESCRIPTION

 News (NNTP) to JSON (JNTP) channel backend.
 
 Actual RFC : https://github.com/Julien-Arlandis/phpNemoServer/blob/master/jntp_rfc.txt
 Static example : https://github.com/Julien-Arlandis/N2JConnector/blob/master/N2Jconnector.pl

=head1 AUTHOR

 Gérald Niel, gerald.niel@gmail.com

 All rights reserved.

 This program is free software; you can redistribute it and/or modify it
 under the same terms as Perl 5.10.0. For more details, see the full
 text of the licenses in the directory LICENSES.

 Some parts of this program come from Inn's controlchan and are
 Copyright 2001 by Marco d'Itri <md@linux.it>
=cut

use strict;
use warnings;
use utf8;

use JSON;
use JSON qw( decode_json );
use MIME::Parser;
use LWP::UserAgent;
use MIME::WordDecoder;
use Mail::Address;
use Encode;
use Encode::Detect::Detector;
use DateTime;
use DateTime::Format::HTTP;
use Digest::SHA;
use Crypt::OpenSSL::RSA;
use MIME::Base64;

# globals


my $curmsgid;
my %domain;
my $article_string = '';


# Global config (constant in upper case)
my $GW_NAME     = "News2Json";
my $GW_VERSION  = "0.4.0-alpha64";
my $USER_AGENT	= "$GW_NAME/$GW_VERSION";
my $FROM_DOMAIN = $INN::Config::fromhost;
my $DATATYPE	= 'NetNews';
#pour contourner le bug sur le hostname des serveurs JNTP
my $conf_file = $INN::Config::newsetc.'/news2json.cf';

# Set logging
my $debug = 0;
my $use_syslog = 1; # this is really verbose at this time!
# probably better to log jntp dialog in a deticated logfile (TODO)
eval { require Sys::Syslog; import Sys::Syslog; $use_syslog = 1; };

if ($use_syslog) {
    if ($Sys::Syslog::VERSION < 0.15) {
        eval "sub Sys::Syslog::_PATH_LOG { '/dev/log' }" if $^O eq 'dec_osf';
        Sys::Syslog::setlogsock('unix') if $^O =~ /linux|dec_osf|freebsd|darwin/;
    }
    openlog("$GW_NAME-$GW_VERSION", 'pid', $INN::Config::syslog_facility);
}

logmsg('starting', 'info');

## Read conf File
if (-e($conf_file) && -r($conf_file)) {
	open (CFFILE, '<', $conf_file) or die $!;

	while (<CFFILE>) {
		next if /^#|^\s+$/;
		chop;
		my ($s, $d) = split /\s+/;
		$domain{$s} = $d if ( defined ($d) );
	}
}

POST: while (<STDIN>) {
	chop;
	my ($token, $msgid, $feed) = split(/\s+/, $_, 3);
	($curmsgid = $msgid || '') =~ s/<(.*?)\>/$1/;
	next if (!defined($token) || !$curmsgid || !defined($feed));


	# Test if feed(s) want the article, do nothing if not
	my %send_ok;
	my @feeds = split(/\s+/, $feed);
	foreach (@feeds) {
		
		## --------
		## Part code from controlchan
		##
		## Copyright 2001 by Marco d'Itri <md@linux.it>
		##
		## Redistribution and use in source and binary forms, with or without
		## modification, are permitted provided that the following conditions
		## are met:
		##
		##   1. Redistributions of source code must retain the above copyright
		##      notice, this list of conditions and the following disclaimer.
		##
		##   2. Redistributions in binary form must reproduce the above copyright
		##      notice, this list of conditions and the following disclaimer in the
		##      documentation and/or other materials provided with the distribution.
		my $jntp_server=$_;
		my $artfh = open_article($token);
		next if not defined $artfh;

		
		while (<$artfh>) {
			$article_string .= $_;
			#log extrèmement bavard
			#logmsg("article $article_string", 'info');
		}
		close $artfh  // next POST;

		
		
		
		my %jsonPropose;
		$domain{$jntp_server} ||= $FROM_DOMAIN;
		$msgid =~ s/<//g;
		$msgid =~ s/>//g;
		
my $jsonPropose = <<"EOF";
[
    "diffuse",
    {
        "Propose": [
            {
                "Data": {
                    "DataType": "$DATATYPE",
                    "DataID": "$msgid"
                }
            }
        ],
        "From": "$FROM_DOMAIN"
    }
]
EOF
	
		$jsonPropose = decode_json($jsonPropose);
		$jsonPropose = JSON->new->utf8->canonical(1)->encode($jsonPropose);
		# $jsonPropose=~ s/\s*//g;
		# $jsonPropose=~ s/,/, /g;
		# $jsonPropose=~ s/:/: /g;
		# $jsonPropose=~ s/{/{ /g;
	 	# $jsonPropose=~ s/}/ }/g;
		# $jsonPropose=~ s/\[/\[ /g;
		# $jsonPropose=~ s/\]/ \]/g;
		
		##dev uniquement sinon log trop bavard
		logmsg ( "$jntp_server > $jsonPropose", 'info');
		

		my $res = execJNTP($jntp_server, $jsonPropose);
		
		
	
		if($res->{'code'} eq "200") {
	
			my $body=getArticle();

my $jsonSend = <<"EOF";
			[
			    "diffuse",
			    {
				"Data":
				    {
				       "DataType": "$DATATYPE",
				       "DataID": "$msgid",
				       "Body": ""
				    },
				"From": "$FROM_DOMAIN"
			    }
			]

EOF
	
		
		logmsg ( "$jntp_server > $jsonSend", 'info');
		$jsonSend = decode_json($jsonSend);
		logmsg ( "$jntp_server > $jsonSend", 'info');
		$jsonSend->[1]{'Data'}{'Body'} = getArticle();
		logmsg ( "$jntp_server > $jsonSend", 'info');
		$jsonSend = JSON->new->utf8->canonical(1)->encode($jsonSend);
		
		# $jsonSend=~ s/\s*//g;
		# $jsonSend=~ s/,/, /g;
		# $jsonSend=~ s/:/: /g;
		# $jsonSend=~ s/{/{ /g;
	 	# $jsonSend=~ s/}/ }/g;
		# $jsonSend=~ s/\[/\[ /g;
		# $jsonSend=~ s/\]/ \]/g;
		

		
		# $jsonSend = encode_json($jsonSend);
				
				
		##dev uniquement sinon log trop bavard
		logmsg ( "$jntp_server > $jsonSend", 'info');
			
		$res = execJNTP($jntp_server, $jsonSend);
		
		}
		my $reponse_code =$res->{'code'};
		logmsg ( "$jntp_server < $reponse_code", 'info');
	}
}

logmsg('closed', 'info');
closelog() if $use_syslog;
exit 0;
 



# Read file by lines and return string.
sub read_file {
	my ($path) = @_;

	open (my $file, '<', $path) or die $!;
	my @lines = <$file>;
	$file = join ('', @lines);
	chomp($file);
	return $file;
}



##  Copyright 2015 by Julien Arlandis
sub execJNTP {
	my $req = HTTP::Request->new(POST => "http://".$_[0]."/jntp/");
	$req->header('content-type' => 'application/json');
	$req->content($_[1]);
	my $response = LWP::UserAgent->new( agent => $USER_AGENT)->request($req)->content;
	print $response."\n";
	return decode_json($response);
}

## -------
##  Part code of controlchan
##
##  Copyright 2001 by Marco d'Itri <md@linux.it>
##
##  Redistribution and use in source and binary forms, with or without
##  modification, are permitted provided that the following conditions
##  are met:
##
##   1. Redistributions of source code must retain the above copyright
##      notice, this list of conditions and the following disclaimer.
##
##   2. Redistributions in binary form must reproduce the above copyright
##      notice, this list of conditions and the following disclaimer in the
##      documentation and/or other materials provided with the distribution.

# Open an article
sub open_article {
    my $token = shift;

    if ($token =~ /^\@.+\@$/) {
        my $pid = open(ART, '-|');
        logdie('Cannot fork: ' . $!) if $pid < 0;
        if ($pid == 0) {
            exec("$INN::Config::newsbin/sm", '-q', $token) or
                logdie("Cannot exec sm: $!");
        }
        return *ART;
    }
    return undef;
}

# Logging
sub logmsg {
    my ($msg, $lvl) = @_;

    return if $lvl and $lvl eq 'debug' and not $debug;
    if ($use_syslog) {
        syslog($lvl || 'notice', '%s', $msg);
    } else {
        print STDERR (scalar localtime) . ": $msg\n";
    }
}

sub logdie {
    my ($msg, $lvl) = @_;

    $msg .= " ($curmsgid)" if $curmsgid;
    logmsg($msg, $lvl || 'err');
    closelog() if $use_syslog;
    exit 1;
}



## -------

__END__

